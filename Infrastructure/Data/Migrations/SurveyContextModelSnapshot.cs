// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(SurveyContext))]
    partial class SurveyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoriesCatalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("categories_catalog", (string)null);
                });

            modelBuilder.Entity("CategoryOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CatalogOptions_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("CategoriesCatalogId")
                        .HasColumnType("integer");

                    b.Property<int>("CategoriesOptions_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("OptionsResponseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesCatalogId");

                    b.HasIndex("OptionsResponseId");

                    b.ToTable("category_options", (string)null);
                });

            modelBuilder.Entity("Chapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Chapter_Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("chapter_number");

                    b.Property<string>("Chapter_Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chapter_title");

                    b.Property<string>("ComponentHtml")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("ComponentReact")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int>("Survey_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("chapters", (string)null);
                });

            modelBuilder.Entity("OptionQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoriesCatalogId")
                        .HasColumnType("integer");

                    b.Property<string>("CommentOptiones")
                        .HasColumnType("text")
                        .HasColumnName("comment_options");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("NumberOption")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("numberoption");

                    b.Property<int>("OptionCatalog_Id")
                        .HasColumnType("integer");

                    b.Property<int>("OptionQuestion_Id")
                        .HasColumnType("integer");

                    b.Property<int>("Option_Id")
                        .HasColumnType("integer");

                    b.Property<long?>("OptionsResponseId")
                        .HasColumnType("bigint");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int?>("SubQuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubQuestion_Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesCatalogId");

                    b.HasIndex("OptionsResponseId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SubQuestionId");

                    b.ToTable("option_questions", (string)null);
                });

            modelBuilder.Entity("OptionsResponse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("OptionQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("option_question_id");

                    b.Property<string>("OptionText")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("options_response", (string)null);
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChapterId")
                        .HasColumnType("integer");

                    b.Property<string>("Comment_Question")
                        .HasColumnType("text")
                        .HasColumnName("comment_question");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Question_Number")
                        .HasColumnType("text")
                        .HasColumnName("question_number");

                    b.Property<string>("Question_Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<string>("Response_Type")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("response_type");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("SubQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CommentSubquestion")
                        .HasColumnType("text")
                        .HasColumnName("comment_subquestion");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("SubQuestion_Id")
                        .HasColumnType("integer");

                    b.Property<string>("SubquestionNumber")
                        .HasColumnType("text")
                        .HasColumnName("subquestion_number");

                    b.Property<string>("SubquestionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subquestiontext");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("sub_questions", (string)null);
                });

            modelBuilder.Entity("SummaryOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code_Number")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("code_number");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Question_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("integer");

                    b.Property<int>("Survey_Id")
                        .HasColumnType("integer");

                    b.Property<string>("ValueRta")
                        .HasColumnType("text")
                        .HasColumnName("value_rta");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyId");

                    b.ToTable("summaryoptions", (string)null);
                });

            modelBuilder.Entity("Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ComponentHtml")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("componenthtml");

                    b.Property<string>("ComponentReact")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("componentreact");

                    b.Property<DateTime>("Created_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Instruction")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated_At")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("updateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("surveys", (string)null);
                });

            modelBuilder.Entity("CategoryOptions", b =>
                {
                    b.HasOne("CategoriesCatalog", "CategoriesCatalog")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("CategoriesCatalogId");

                    b.HasOne("OptionsResponse", "OptionsResponse")
                        .WithMany("CategoryOptions")
                        .HasForeignKey("OptionsResponseId");

                    b.Navigation("CategoriesCatalog");

                    b.Navigation("OptionsResponse");
                });

            modelBuilder.Entity("Chapter", b =>
                {
                    b.HasOne("Survey", "Survey")
                        .WithMany("Chapters")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("OptionQuestion", b =>
                {
                    b.HasOne("CategoriesCatalog", "CategoriesCatalog")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("CategoriesCatalogId");

                    b.HasOne("OptionsResponse", "OptionsResponse")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("OptionsResponseId");

                    b.HasOne("Question", "Question")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("QuestionId");

                    b.HasOne("SubQuestion", "SubQuestion")
                        .WithMany("OptionQuestions")
                        .HasForeignKey("SubQuestionId");

                    b.Navigation("CategoriesCatalog");

                    b.Navigation("OptionsResponse");

                    b.Navigation("Question");

                    b.Navigation("SubQuestion");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.HasOne("Chapter", "Chapter")
                        .WithMany("Questions")
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");
                });

            modelBuilder.Entity("SubQuestion", b =>
                {
                    b.HasOne("Question", "Question")
                        .WithMany("SubQuestions")
                        .HasForeignKey("QuestionId");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SummaryOptions", b =>
                {
                    b.HasOne("Question", "Question")
                        .WithMany("SummaryOptions")
                        .HasForeignKey("QuestionId");

                    b.HasOne("Survey", "Survey")
                        .WithMany("SummaryOptions")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Question");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("CategoriesCatalog", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Chapter", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("OptionsResponse", b =>
                {
                    b.Navigation("CategoryOptions");

                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Question", b =>
                {
                    b.Navigation("OptionQuestions");

                    b.Navigation("SubQuestions");

                    b.Navigation("SummaryOptions");
                });

            modelBuilder.Entity("SubQuestion", b =>
                {
                    b.Navigation("OptionQuestions");
                });

            modelBuilder.Entity("Survey", b =>
                {
                    b.Navigation("Chapters");

                    b.Navigation("SummaryOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
